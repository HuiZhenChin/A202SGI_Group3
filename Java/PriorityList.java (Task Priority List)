package com.example.project;


import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.Spinner;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SearchView;
import androidx.recyclerview.widget.DividerItemDecoration;
import androidx.recyclerview.widget.ItemTouchHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class PriorityList extends AppCompatActivity  {

    ListView listView;
    ArrayAdapter<String> arrayAdapter;
    List<String> taskList;
    SearchView searchView;

    RecyclerView recyclerView;
    RecyclerAdapter recyclerAdapter;

    List<TaskItem> highList, mediumList, lowList, savedtasklist;


    String progressitems[] = {"In Progress", "Completed"};

    ArrayList list= new ArrayList(Arrays.asList(progressitems));

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.priority_list);

        listView = findViewById(R.id.searchList);
        searchView = findViewById(R.id.searchView);

        taskList = new ArrayList<>(Arrays.asList("Data Science", "Theory of Computation", "Cybersecurity", "Quiz", "Test", "Android Development Project", "Big Data Programming Project", "Advanced Algorithm Viva", "Software Engineering Project"));
        arrayAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, taskList);
        listView.setAdapter(arrayAdapter);


        RecyclerView recyclerView = findViewById(R.id.recyclerView);

        //set up the SearchView
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                // Filter the ListView as the user types
                if (TextUtils.isEmpty(newText)) {
                    listView.setVisibility(View.INVISIBLE); // Hide ListView when search is empty
                } else {
                    listView.setVisibility(View.VISIBLE); // Show ListView when search is active
                    arrayAdapter.getFilter().filter(newText);
                }
                return true;
            }
        });

        //go back create task

        ImageButton add = findViewById(R.id.addBtn);
        add.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openNewActivity();
            }
        });





        //display the values in TextViews


        // TextView high= findViewById(R.id.highPriority);
        // TextView low= findViewById(R.id.lowPriority);
        // TextView medium= findViewById(R.id.mediumPriority);
        //TextView due= findViewById(R.id.dueTitle);

        //detect what user selects in the radio group
        String highselectedPriority = getIntent().getStringExtra("selectedHighPriority");
        String lowselectedPriority = getIntent().getStringExtra("selectedLowPriority");
        String mediumselectedPriority = getIntent().getStringExtra("selectedMediumPriority");
        Intent intent = getIntent();
        String taskTitle = intent.getStringExtra("taskTitle");
        String selectedDate = intent.getStringExtra("selectedDate");
        //TextView message= findViewById(R.id.noTaskMessage);



        //detect the selected priority and show the corresponding TextView
        if (lowselectedPriority == null && mediumselectedPriority == null && highselectedPriority == null) {

            savedtasklist= new ArrayList<>();
            savedtasklist.add(new TaskItem("Theory of Computation Test", "21-12-2023","High Priority"));
            savedtasklist.add(new TaskItem("B Test", "23-12-2023","High Priority"));
            savedtasklist.add(new TaskItem("C Test", "25-12-2023","High Priority"));
            savedtasklist.add(new TaskItem("D Test", "27-12-2023","High Priority"));
            savedtasklist.add(new TaskItem("E Test", "29-12-2023","Medium Priority"));
            savedtasklist.add(new TaskItem("F Test", "30-12-2023","Medium Priority"));
            savedtasklist.add(new TaskItem("G Test", "21-12-2023","Medium Priority"));
            savedtasklist.add(new TaskItem("H Test", "21-12-2023","Low Priority"));
            savedtasklist.add(new TaskItem("I Test", "21-12-2023","Low Priority"));
            savedtasklist.add(new TaskItem("J Test", "21-12-2023","Low Priority"));
            savedtasklist.add(new TaskItem("K Test", "21-12-2023","Low Priority"));
            savedtasklist.add(new TaskItem("Cybersecurity Test", "21-12-2023","Low Priority"));



            recyclerView = findViewById(R.id.recyclerView);
            recyclerAdapter = new RecyclerAdapter(savedtasklist, this);
            LinearLayoutManager layoutManagerHigh = new LinearLayoutManager(this);
            recyclerView.setLayoutManager(layoutManagerHigh);

            recyclerView.setAdapter(recyclerAdapter);

            DividerItemDecoration highdividerItemDecoration = new DividerItemDecoration(this, DividerItemDecoration.VERTICAL);
            recyclerView.addItemDecoration(highdividerItemDecoration);


            ItemTouchHelper itemTouchHelperHigh = new ItemTouchHelper(simpleCallback);
            itemTouchHelperHigh.attachToRecyclerView(recyclerView);



        }

        //else if (lowselectedPriority== null && mediumselectedPriority == null && highselectedPriority == null){

        // message.setVisibility(View.VISIBLE);
        // }


    };


    public void openNewActivity(){
        Intent intent = new Intent(this, NewActivity.class);
        startActivity(intent);
    }

    ItemTouchHelper.SimpleCallback simpleCallback = new ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP | ItemTouchHelper.DOWN | ItemTouchHelper.START | ItemTouchHelper.END, 0) {

        @Override
        public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {
            // Determine the source and target RecyclerViews
            RecyclerView sourceRecyclerView = (RecyclerView) recyclerView;
            RecyclerView targetRecyclerView = (RecyclerView) target.itemView.getParent();

            int fromPosition = viewHolder.getAdapterPosition();
            int toPosition = target.getAdapterPosition();
            int totalTasks = recyclerView.getAdapter().getItemCount();
            int dropPosition = (fromPosition + toPosition) / 2;

            // Determine the priority based on the drop position
            String priority;
            if (dropPosition <= totalTasks * 0.5) {
                priority = "High Priority";
            } else if (dropPosition <= totalTasks * 0.7) {
                priority = "Medium Priority";
            } else {
                priority = "Low Priority";
            }

            //update the priority for the dropped task
            TaskItem droppedItem = savedtasklist.get(fromPosition);
            droppedItem.setPrioritySymbol(priority);

            //notify for the item move
            Collections.swap(savedtasklist, fromPosition, toPosition);
            recyclerView.getAdapter().notifyItemMoved(fromPosition, toPosition);

            //update the priority image for both source and target views
            // Source view (when dragging)
            RecyclerAdapter.ViewHolder sourceViewHolder = (RecyclerAdapter.ViewHolder) viewHolder;
            sourceViewHolder.priorityImage.setImageResource(getPriorityImageResource(priority));

            // Target view (when dropping)
            RecyclerAdapter.ViewHolder targetViewHolder = (RecyclerAdapter.ViewHolder) target;
            targetViewHolder.priorityImage.setImageResource(getPriorityImageResource(priority));

            return true;
        }


        @Override
        public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {
            //handle item swipe
        }

        private int getPriorityImageResource(String priority) {
            if ("High Priority".equals(priority)) {
                return R.drawable.baseline_circle_red;
            } else if ("Medium Priority".equals(priority)) {
                return R.drawable.baseline_circle_yellow;
            } else if ("Low Priority".equals(priority)) {
                return R.drawable.baseline_circle_green;
            }
            return 0;
        }

    };



}


